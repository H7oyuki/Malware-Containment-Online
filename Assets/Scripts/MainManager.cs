using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System;
using System.Linq;

public class MainManager : MonoBehaviour
{
    public GameObject ImagePop;
    public GameObject ImageCommand;
    public GameObject ButtonAction;
    public GameObject ButtonNext;
    public GameObject Notification;
    public GameObject Reseacher;
    public GameObject Forensic;
    public GameObject Commander;
    public GameObject[] Traffic_Object;
    public Image[] Card;
    public Sprite Sprites;

    int start = 1;
    int end = 10;
    int start2 = 0;
    int end2 = 4;
    int[] randomcard = new int[10];
    int[] random = new int[5];
    string[] card = new string[15];
	string[] card2 = new string[15];
    int[] In = new int[5];
    int[] Out = new int[5];
    int[] Traffic = new int[5];
    int n, r, f, c;


    List<int> numbers = new List<int>();
    List<int> numbers2 = new List<int>();

    // Start is called before the first frame update
    void Start()
    {
        RandomCard();
        CardJudgment();
        Hoge();
        CardDisplay();
        PlayerSet();
    }

    // Update is called once per frame
    void Update()
    {

    }

    //行動ボタンの非表示
    public void DeleteButtonAction()
    {
        ButtonAction.SetActive(false);
    }

    //ターン終了ボタンの非表示とターン処理
    public void DeleteButtonNext()
    {
        ButtonNext.SetActive(false);
        Debug.Log("ターン終了しました。");

    }

    //ポップアップの表示、非表示
    public void PushPopUpButton()
    {
        ImagePop.SetActive(true);
    }

    public void PushBackPopUpButton()
    {
        ImagePop.SetActive(false);
    }

    //行動選択のポップアップ表示、非表示
    public void PushCommandButton()
    {
        ImageCommand.SetActive(true);
    }

    public void PushBackCommandButton()
    {
        ImageCommand.SetActive(false);
    }

    //ホーム画面に戻る
    public void PushBackButton()
    {
        SceneManager.LoadScene("Launcher");
    }

    //行動ボタン内の処理

    //Nの初期位置(仮)
    //int n = 0;

    //時計回りに部署移動
    public void MoveRight()
    {

        if (n == 0)
        {
            Notification.transform.localPosition = new Vector3(381.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            n = 1;
        }
        else if (n == 1)
        {
            Notification.transform.localPosition = new Vector3(381.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            n = 2;
        }else if (n == 2)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            n = 3;
        }
        else if (n == 3)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            n = 4;
        }
        else if (n == 4)
        {
            Notification.transform.localPosition = new Vector3(-258.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            n = 0;
        }
          ImageCommand.SetActive(false);
          ButtonNext.SetActive(true);
    }


    //反時計回りに部署移動
    public void MoveLeft()
    {

        if (n == 2)
        {
            Notification.transform.localPosition = new Vector3(381.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            n = 1;
        }
        else if (n == 3)
        {
            Notification.transform.localPosition = new Vector3(381.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            n = 2;
        }
        else if (n == 4)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            n = 3;
        }
        else if (n == 0)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            n = 4;
        }
        else if (n == 1)
        {
            Notification.transform.localPosition = new Vector3(-258.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            n = 0;
        }
        ImageCommand.SetActive(false);
        ButtonNext.SetActive(true);
    }





    public void RandomCard()
    {
        for (int i = start; i <= end; i++)
        {
            numbers.Add(i);
        }
        int j = 0;
        while (numbers.Count > 0)
        {
            int index = UnityEngine.Random.Range(0, numbers.Count);
            int ransu = numbers[index];
            randomcard[j] = ransu;
            j++;
            numbers.RemoveAt(index);
        }
        CardSet();
        Shuffle();
    }

    public void CardSet()
    {
        for (int i = 0; i <= 9; i++)
        {
            if (randomcard[i] == 1)
            {
                card[i] = "term0";
            }
            else if (randomcard[i] == 2)
            {
                 card[i] = "term1";
            }
            else if (randomcard[i] == 3)
            {
                 card[i] = "term2";
			}
            else if (randomcard[i] == 4)
            {
                 card[i] = "term3";
            }
            else if (randomcard[i] == 5)
            {
                 card[i] = "term4";
            }
            else if (randomcard[i] == 6)
            {
                 card[i] = "term5";
            }
            else if (randomcard[i] == 7)
            {
                 card[i] = "eve0";
            }
            else if (randomcard[i] == 8)
            {
                 card[i] = "eve1";
            }else if (randomcard[i] == 9)
            {
                  card[i] = "eve2";
            }
            else if(randomcard[i] == 10)
            {
			      card[i] = "eve3";
            }
        }
    }

	public void Shuffle()
	{
        card2 = card.OrderBy(i => Guid.NewGuid()).ToArray();
	}

    public void CardJudgment()
    {
        for(int i = 0; i< 3; i++)
        {
            if(card2[i] == "term4" || card2[i] == "term5")
            {
                In[0] += 1;
            }else if(card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[0] += 1;
            }else if(card2[i] == "term2")
            {
                Out[0] += 2;
            }else
            {
                In[0] += 0;
                Out[0] += 0;
            }
        }

        for (int i = 3; i < 6; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[1] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[1] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[1] += 2;
            }
            else
            {
                In[1] += 0;
                Out[1] += 0;
            }
        }

        for (int i = 6; i < 9; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[2] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[2] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[2] += 2;
            }
            else
            {
                In[2] += 0;
                Out[2] += 0;
            }
        }

        for (int i = 9; i < 12; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[3] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[3] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[3] += 2;
            }
            else
            {
                In[3] += 0;
                Out[3] += 0;
            }
        }

        for (int i = 12; i < 15; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[4] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[4] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[4] += 2;
            }
            else
            {
                In[4] += 0;
                Out[4] += 0;
            }
        }
    }

    public void Hoge()
    {
        for(int i = 0; i < 5; i++)
        {
            Traffic[i] = In[i] + Out[i];
            Text Traffic_text = Traffic_Object[i].GetComponent<Text>();

            Traffic_text.text = " " + Traffic[i];
        }
    }

    public void CardDisplay()
    {
        for (int i = 0; i < 15; i++)
        {
            if (card2[i] != null)
            {
                Card[i].sprite = Sprites;
            }
        }
    }

    public void PlayerSet()
    {
        for (int i = start2; i <= end2; i++)
        {
            numbers2.Add(i);
        }
        int j = 0;
        while (numbers2.Count > 0)
        {
            int index = UnityEngine.Random.Range(0, numbers2.Count);
            int ransu = numbers2[index];
            random[j] = ransu;
            j++;
            numbers2.RemoveAt(index);
        }

        //ノーティフィケーションのランダム配置
        for(int i = 0; i < 5; i++)
        {
            if(random[0] == i)
            {
                if (random[0] == 0)
                {
                    Notification.transform.localPosition = new Vector3(-258.8f, 444.7f, 0);
                    n = 0;
                    break;
                }
                else if (random[0] == 1)
                {
                    Notification.transform.localPosition = new Vector3(381.2f, 265.4f, 0);
                    n = 1;
                    break;
                }
                else if (random[0] == 2)
                {
                    Notification.transform.localPosition = new Vector3(381.2f, -35.4f, 0);
                    n = 2;
                    break;
                }
                else if (random[0] == 3)
                {
                    Notification.transform.localPosition = new Vector3(-900.0f, -35.4f, 0);
                    n = 3;
                    break;
                }
                else if (random[0] == 4)
                {
                    Notification.transform.localPosition = new Vector3(-900.0f, 265.4f, 0);
                    n = 4;
                    break;
                }
            }
        }
        //リサーチャーのランダム配置
        for (int i = 0; i < 5; i++)
        {
            if (random[1] == i)
            {
                if (random[1] == 0)
                {
                    Reseacher.transform.localPosition = new Vector3(-178.8f, 444.7f, 0);
                    r = 0;
                    break;
                }
                else if (random[1] == 1)
                {
                    Reseacher.transform.localPosition = new Vector3(461.2f, 265.4f, 0);
                    r = 1;
                    break;
                }
                else if (random[1] == 2)
                {
                    Reseacher.transform.localPosition = new Vector3(461.2f, -35.4f, 0);
                    r = 2;
                    break;
                }
                else if (random[1] == 3)
                {
                    Reseacher.transform.localPosition = new Vector3(-820.0f, -35.4f, 0);
                    r = 3;
                    break;
                }
                else if (random[1] == 4)
                {
                    Reseacher.transform.localPosition = new Vector3(-820.0f, 265.4f, 0);
                    r = 4;
                    break;
                }
            }
        }
        //フォレンジックエンジニアのランダム配置
        for (int i = 0; i < 5; i++)
        {
            if (random[2] == i)
            {
                if (random[2] == 0)
                {
                    Forensic.transform.localPosition = new Vector3(-98.8f, 444.7f, 0);
                    f = 0;
                    break;
                }
                else if (random[2] == 1)
                {
                    Forensic.transform.localPosition = new Vector3(541.2f, 265.4f, 0);
                    f = 1;
                    break;
                }
                else if (random[2] == 2)
                {
                    Forensic.transform.localPosition = new Vector3(541.2f, -35.4f, 0);
                    f = 2;
                    break;
                }
                else if (random[2] == 3)
                {
                    Forensic.transform.localPosition = new Vector3(-740.0f, -35.4f, 0);
                    f = 3;
                    break;
                }
                else if (random[2] == 4)
                {
                    Forensic.transform.localPosition = new Vector3(-740.0f, 265.4f, 0);
                    f = 4;
                    break;
                }
            }
        }
        //コマンダーのランダム配置
        for (int i = 0; i < 5; i++)
        {
            if (random[3] == i)
            {
                if (random[3] == 0)
                {
                    Commander.transform.localPosition = new Vector3(-18.8f, 444.7f, 0);
                    c = 0;
                    break;
                }
                else if (random[3] == 1)
                {
                    Commander.transform.localPosition = new Vector3(621.2f, 265.4f, 0);
                    c = 1;
                    break;
                }
                else if (random[3] == 2)
                {
                    Commander.transform.localPosition = new Vector3(621.2f, -35.4f, 0);
                    c = 2;
                    break;
                }
                else if (random[3] == 3)
                {
                    Commander.transform.localPosition = new Vector3(-660.0f, -35.4f, 0);
                    c = 3;
                    break;
                }
                else if (random[3] == 4)
                {
                    Commander.transform.localPosition = new Vector3(-660.0f, 265.4f, 0);
                    c = 4;
                    break;
                }
            }
        }
    }
}
