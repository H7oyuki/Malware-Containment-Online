using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

public class MainManager : MonoBehaviour
{
    public GameObject ImagePop;
    public GameObject ImageCommand;
    public GameObject ButtonAction;
    public GameObject ButtonNext;
    public GameObject Notification;
    public GameObject Reseacher;
    public GameObject Forensic;
    public GameObject Commander;
    public GameObject[] Traffic_Object;
    public Image[] Card;
    public Sprite Sprites;

    int start = 1;
    int end = 10;
    int start2 = 0;
    int end2 = 4;
    int[] randomcard = new int[10];
    int[] random = new int[5];
    string[] card = new string[15];
	string[] card2 = new string[15];
    int[] In = new int[5];
    int[] Out = new int[5];
    int[] Traffic = new int[5];
    int n, r, f, c;
    int flg1 = 0; //遠隔操作マルウェアterm0の有無判定。発見したら1;
    int flg2 = 0; //遠隔操作マルウェアterm1の有無判定。発見したら1;
    int flg3 = 0; //残業の有無判定。付与されていれば1;
    int day = 0;    //日のカウンター
    int turn = 0;   //ターンのカウンター


    List<int> numbers = new List<int>();
    List<int> numbers2 = new List<int>();

    // Start is called before the first frame update
    async void Start()
    {
        RandomCard();
        CardJudgment();
        Hoge();
        CardDisplay();
        PlayerSet();
        await Task.Delay(3000);
        Debug.Log("調査1日目　午前");
        CommanderAction();
    }

    // Update is called once per frame
    void Update()
    {

    }

    //行動ボタンの表示/非表示

    public void PopUpButtonAction()
    {
        ButtonAction.SetActive(true);
    }

    //ターン終了ボタンの非表示とターン処理
    public void DeleteButtonNext()
    {
        ButtonNext.SetActive(false);
        Debug.Log("ターン終了しました。");
        if (turn==3)            //午前ターン
        {
            turn += 1;
            if (day == 0)
            {
                Debug.Log("調査1日目　午後");
                CommanderAction();
            }
            else if (day == 1)
            {
                Debug.Log("調査2日目　午後");
                CommanderAction();
            }
            else if (day==2)
            {
                Debug.Log("調査最終日　午後");
                CommanderAction();
            }
        }
        else if(turn==7)            //午後ターン
        {
            if (flg3==0)                        //残業なし
            {
                if (day == 2)
                {
                    SceneManager.LoadScene("GameOver");
                }
                else if (day < 2)
                {
                    turn = 0;
                    day += 1;
                    if (day == 1)
                    {
                        Debug.Log("調査2日目　午前");
                        CommanderAction();
                    }
                    else if (day == 2)
                    {
                        Debug.Log("調査最終日　午前");
                        CommanderAction();
                    }
                
                }
            }
            else if (flg3==1)                        //残業あり
            {
                turn += 1;
                NotificationAction();
                Debug.Log("ノーティフィケーションの残業ターンです。");
                ButtonAction.SetActive(true);
            }
        }
        else if (turn == 8)                    //残業ターン
        {

            if (day == 2)
            {
                SceneManager.LoadScene("GameOver");
            }
            else if (day < 2)
            {
                turn = 0;
                day += 1;
                CommanderAction();
            }
        }

    }

    //ポップアップの表示、非表示
    public void PushPopUpButton()
    {
        ImagePop.SetActive(true);
    }

    public void PushBackPopUpButton()
    {
        ImagePop.SetActive(false);
    }

    //行動選択のポップアップ表示、非表示
    public void PushCommandButton()
    {
        ImageCommand.SetActive(true);
    }

    public void PushBackCommandButton()
    {
        ImageCommand.SetActive(false);
    }

    //ホーム画面に戻る
    public void PushBackButton()
    {
        SceneManager.LoadScene("Launcher");
    }

    //行動ボタン内の処理


    //部署移動

    //ノーティフィケーション右
    public void MoveRightN()
    {
        //ノーティフィケーション
        if (n == 0)
        {
            Notification.transform.localPosition = new Vector3(381.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            n = 1;
        }
        else if (n == 1)
        {
            Notification.transform.localPosition = new Vector3(381.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            n = 2;
        }
        else if (n == 2)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            n = 3;
        }
        else if (n == 3)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            n = 4;
        }
        else if (n == 4)
        {
            Notification.transform.localPosition = new Vector3(-258.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            n = 0;
        }

        ImageCommand.SetActive(false);
          ButtonNext.SetActive(true);
        ButtonAction.SetActive(false);
    }

    //ノーティフィケーション左
    public void MoveLeftN()
    {

        if (n == 2)
        {
            Notification.transform.localPosition = new Vector3(381.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            n = 1;
        }
        else if (n == 3)
        {
            Notification.transform.localPosition = new Vector3(381.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            n = 2;
        }
        else if (n == 4)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            n = 3;
        }
        else if (n == 0)
        {
            Notification.transform.localPosition = new Vector3(-900.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            n = 4;
        }
        else if (n == 1)
        {
            Notification.transform.localPosition = new Vector3(-258.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            n = 0;
        }

        ImageCommand.SetActive(false);
        ButtonNext.SetActive(true);
        ButtonAction.SetActive(false);
    }

    //リサーチャー右
    public void MoveRightR()
    {

        if (r == 0)
        {
            Reseacher.transform.localPosition = new Vector3(461.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            r = 1;
        }
        else if (r == 1)
        {
            Reseacher.transform.localPosition = new Vector3(461.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            r = 2;
        }
        else if (r == 2)
        {
            Reseacher.transform.localPosition = new Vector3(-820.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            r = 3;
        }
        else if (r == 3)
        {
            Reseacher.transform.localPosition = new Vector3(-820.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            r = 4;
        }
        else if (r == 4)
        {
            Reseacher.transform.localPosition = new Vector3(-178.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            r = 0;
        }

    }

    //リサーチャー左
    public void MoveLeftR()
    {
        if (r == 2)
        {
            Reseacher.transform.localPosition = new Vector3(461.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            r = 1;
        }
        else if (r == 3)
        {
            Reseacher.transform.localPosition = new Vector3(461.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            r = 2;
        }
        else if (r == 4)
        {
            Reseacher.transform.localPosition = new Vector3(-820.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            r = 3;
        }
        else if (r == 0)
        {
            Reseacher.transform.localPosition = new Vector3(-820.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            r = 4;
        }
        else if (r == 1)
        {
            Reseacher.transform.localPosition = new Vector3(-178.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            r = 0;
        }

    }


    //フォレンジックエンジニア右
    public void MoveRightF()
    {
        if (f == 0)
        {
            Forensic.transform.localPosition = new Vector3(541.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            f = 1;
        }
        else if (f == 1)
        {
            Forensic.transform.localPosition = new Vector3(541.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            f = 2;
        }
        else if (f == 2)
        {
            Forensic.transform.localPosition = new Vector3(-740.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            f = 3;
        }
        else if (f == 3)
        {
            Forensic.transform.localPosition = new Vector3(-740.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            f = 4;
        }
        else if (f == 4)
        {
            Forensic.transform.localPosition = new Vector3(-98.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            f = 0;
        }

    }

    //フォレンジックエンジニア左
    public void MoveLeftF()
    {
        if (f == 2)
        {
            Forensic.transform.localPosition = new Vector3(541.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            f = 1;
        }
        else if (f == 3)
        {
            Forensic.transform.localPosition = new Vector3(541.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            f = 2;
        }
        else if (f == 4)
        {
            Forensic.transform.localPosition = new Vector3(-740.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            f = 3;
        }
        else if (f == 0)
        {
            Forensic.transform.localPosition = new Vector3(-740.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            f = 4;
        }
        else if (f == 1)
        {
            Forensic.transform.localPosition = new Vector3(-98.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            f = 0;
        }

    }

    //コマンダー右
    public void MoveRightC()
    {
        if (c == 0)
        {
            Commander.transform.localPosition = new Vector3(621.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            c = 1;
        }
        else if (c == 1)
        {
            Commander.transform.localPosition = new Vector3(621.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            c = 2;
        }
        else if (c == 2)
        {
            Commander.transform.localPosition = new Vector3(-660.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            c = 3;
        }
        else if (c == 3)
        {
            Commander.transform.localPosition = new Vector3(-660.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            c = 4;
        }
        else if (c == 4)
        {
            Commander.transform.localPosition = new Vector3(-18.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            c = 0;
        }

    }

    //コマンダー左
    public void MoveLeftC()
    {
        if (c == 2)
        {
            Commander.transform.localPosition = new Vector3(621.2f, 265.4f, 0);
            Debug.Log("経理部に移動しました。");
            c = 1;
        }
        else if (c == 3)
        {
            Commander.transform.localPosition = new Vector3(621.2f, -35.4f, 0);
            Debug.Log("営業部に移動しました。");
            c = 2;
        }
        else if (c == 4)
        {
            Commander.transform.localPosition = new Vector3(-660.0f, -35.4f, 0);
            Debug.Log("サービス室に移動しました。");
            c = 3;
        }
        else if (c == 0)
        {
            Commander.transform.localPosition = new Vector3(-660.0f, 265.4f, 0);
            Debug.Log("役員室に移動しました。");
            c = 4;
        }
        else if (c == 1)
        {
            Commander.transform.localPosition = new Vector3(-18.8f, 444.7f, 0);
            Debug.Log("総務部に移動しました。");
            c = 0;
        }

    }


    //各プレイヤー処理

    //コマンダー
    public async void CommanderAction()
    {
        Debug.Log("コマンダーのターンです。");

        await Task.Delay(3000);

        //ここから

        MoveRightC();
        turn += 1;
        ReseacherAction();


        //ここまでターン処理のテストスクリプト

        /*
        if (flg1 == 1)
        {
            //ノーティフィケーションに残業付与する処理

        }else if (flg2 == 1){

            //ノーティフィケーションに残業付与する処理

        }else if(flg1 == 0 && flg2 == 0 配列nullチェックに変える){

            turn += 1;

            await Task.Delay(3000);
            
            MoveRightC();
            

        }
        */

    }

    public void CommanderInfo()
    {



    }


    //リサーチャー
    public async void ReseacherAction()
    {
        Debug.Log("リサーチャーのターンです。");

        await Task.Delay(3000);

        //ここから

        MoveRightR();
        turn += 1;
        ForensicAction();


        //ここまでターン処理のテストスクリプト



    }

    public void ReseacherInfo()
    {



    }


    //フォレンジックエンジニア
    public async void ForensicAction()
    {
        Debug.Log("フォレンジックエンジニアのターンです。");

        await Task.Delay(3000);

        //ここから

        MoveRightF();
        turn += 1;
        NotificationAction();


        //ここまでターン処理のテストスクリプト

        if (flg1 == 1 || flg2 == 1)                 //マルウェアを発見した場合
        {
            if (f == n)                             //同部署にいる場合
            {
                MoveRightF();
                await Task.Delay(3000);
            }
            else if (n == 0)                        //Nが０総務部にいる場合
            {
                if (f == 1 || f == 2)
                {
                    MoveLeftF();
                    await Task.Delay(3000);
                }
                else if (f == 3 || f == 4)
                {
                    MoveRightF();
                    await Task.Delay(3000);
                }
            }
            else if (f == 0)                        //Fが０総務部にいる場合
            {
                if (n == 1 || n == 2)
                {
                    MoveRightF();
                    await Task.Delay(3000);
                }
                else if (n == 3 || n == 4)
                {
                    MoveLeftF();
                    await Task.Delay(3000);
                }
            }
            else if (f - n > 0)                     //FとNが総務部以外の場所で同部署でない場合
            {
                MoveLeftF();
                await Task.Delay(3000);
            }
            else if (f - n < 0)
            {
                MoveRightF();
                await Task.Delay(3000);
            }
        }

    }

    public void ForensicInfo()
    {



    }


    //ノーティフィケーション
    public void NotificationAction()
    {
        Debug.Log("ノーティフィケーションのターンです。");

        ButtonAction.SetActive(true);

    }　




        public void RandomCard()
    {
        for (int i = start; i <= end; i++)
        {
            numbers.Add(i);
        }
        int j = 0;
        while (numbers.Count > 0)
        {
            int index = UnityEngine.Random.Range(0, numbers.Count);
            int ransu = numbers[index];
            randomcard[j] = ransu;
            j++;
            numbers.RemoveAt(index);
        }
        CardSet();
        Shuffle();
    }

    public void CardSet()
    {
        for (int i = 0; i <= 9; i++)
        {
            if (randomcard[i] == 1)
            {
                card[i] = "term0";
            }
            else if (randomcard[i] == 2)
            {
                 card[i] = "term1";
            }
            else if (randomcard[i] == 3)
            {
                 card[i] = "term2";
			}
            else if (randomcard[i] == 4)
            {
                 card[i] = "term3";
            }
            else if (randomcard[i] == 5)
            {
                 card[i] = "term4";
            }
            else if (randomcard[i] == 6)
            {
                 card[i] = "term5";
            }
            else if (randomcard[i] == 7)
            {
                 card[i] = "eve0";
            }
            else if (randomcard[i] == 8)
            {
                 card[i] = "eve1";
            }else if (randomcard[i] == 9)
            {
                  card[i] = "eve2";
            }
            else if(randomcard[i] == 10)
            {
			      card[i] = "eve3";
            }
        }
    }

	public void Shuffle()
	{
        card2 = card.OrderBy(i => Guid.NewGuid()).ToArray();
	}

    public void CardJudgment()
    {
        for(int i = 0; i< 3; i++)
        {
            if(card2[i] == "term4" || card2[i] == "term5")
            {
                In[0] += 1;
            }else if(card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[0] += 1;
            }else if(card2[i] == "term2")
            {
                Out[0] += 2;
            }else
            {
                In[0] += 0;
                Out[0] += 0;
            }
        }

        for (int i = 3; i < 6; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[1] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[1] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[1] += 2;
            }
            else
            {
                In[1] += 0;
                Out[1] += 0;
            }
        }

        for (int i = 6; i < 9; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[2] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[2] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[2] += 2;
            }
            else
            {
                In[2] += 0;
                Out[2] += 0;
            }
        }

        for (int i = 9; i < 12; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[3] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[3] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[3] += 2;
            }
            else
            {
                In[3] += 0;
                Out[3] += 0;
            }
        }

        for (int i = 12; i < 15; i++)
        {
            if (card2[i] == "term4" || card2[i] == "term5")
            {
                In[4] += 1;
            }
            else if (card2[i] == "term0" || card2[i] == "term1" || card2[i] == "term3" || card2[i] == "eve3")
            {
                Out[4] += 1;
            }
            else if (card2[i] == "term2")
            {
                Out[4] += 2;
            }
            else
            {
                In[4] += 0;
                Out[4] += 0;
            }
        }
    }

    public void Hoge()
    {
        for(int i = 0; i < 5; i++)
        {
            Traffic[i] = In[i] + Out[i];
            Text Traffic_text = Traffic_Object[i].GetComponent<Text>();

            Traffic_text.text = " " + Traffic[i];
        }
    }

    public void CardDisplay()
    {
        for (int i = 0; i < 15; i++)
        {
            if (card2[i] != null)
            {
                Card[i].sprite = Sprites;
            }
        }
    }

    public void PlayerSet()
    {
        for (int i = start2; i <= end2; i++)
        {
            numbers2.Add(i);
        }
        int j = 0;
        while (numbers2.Count > 0)
        {
            int index = UnityEngine.Random.Range(0, numbers2.Count);
            int ransu = numbers2[index];
            random[j] = ransu;
            j++;
            numbers2.RemoveAt(index);
        }

        //ノーティフィケーションのランダム配置
        for(int i = 0; i < 5; i++)
        {
            if(random[0] == i)
            {
                if (random[0] == 0)
                {
                    Notification.transform.localPosition = new Vector3(-258.8f, 444.7f, 0);
                    n = 0;
                    break;
                }
                else if (random[0] == 1)
                {
                    Notification.transform.localPosition = new Vector3(381.2f, 265.4f, 0);
                    n = 1;
                    break;
                }
                else if (random[0] == 2)
                {
                    Notification.transform.localPosition = new Vector3(381.2f, -35.4f, 0);
                    n = 2;
                    break;
                }
                else if (random[0] == 3)
                {
                    Notification.transform.localPosition = new Vector3(-900.0f, -35.4f, 0);
                    n = 3;
                    break;
                }
                else if (random[0] == 4)
                {
                    Notification.transform.localPosition = new Vector3(-900.0f, 265.4f, 0);
                    n = 4;
                    break;
                }
            }
        }
        //リサーチャーのランダム配置
        for (int i = 0; i < 5; i++)
        {
            if (random[1] == i)
            {
                if (random[1] == 0)
                {
                    Reseacher.transform.localPosition = new Vector3(-178.8f, 444.7f, 0);
                    r = 0;
                    break;
                }
                else if (random[1] == 1)
                {
                    Reseacher.transform.localPosition = new Vector3(461.2f, 265.4f, 0);
                    r = 1;
                    break;
                }
                else if (random[1] == 2)
                {
                    Reseacher.transform.localPosition = new Vector3(461.2f, -35.4f, 0);
                    r = 2;
                    break;
                }
                else if (random[1] == 3)
                {
                    Reseacher.transform.localPosition = new Vector3(-820.0f, -35.4f, 0);
                    r = 3;
                    break;
                }
                else if (random[1] == 4)
                {
                    Reseacher.transform.localPosition = new Vector3(-820.0f, 265.4f, 0);
                    r = 4;
                    break;
                }
            }
        }
        //フォレンジックエンジニアのランダム配置
        for (int i = 0; i < 5; i++)
        {
            if (random[2] == i)
            {
                if (random[2] == 0)
                {
                    Forensic.transform.localPosition = new Vector3(-98.8f, 444.7f, 0);
                    f = 0;
                    break;
                }
                else if (random[2] == 1)
                {
                    Forensic.transform.localPosition = new Vector3(541.2f, 265.4f, 0);
                    f = 1;
                    break;
                }
                else if (random[2] == 2)
                {
                    Forensic.transform.localPosition = new Vector3(541.2f, -35.4f, 0);
                    f = 2;
                    break;
                }
                else if (random[2] == 3)
                {
                    Forensic.transform.localPosition = new Vector3(-740.0f, -35.4f, 0);
                    f = 3;
                    break;
                }
                else if (random[2] == 4)
                {
                    Forensic.transform.localPosition = new Vector3(-740.0f, 265.4f, 0);
                    f = 4;
                    break;
                }
            }
        }
        //コマンダーのランダム配置
        for (int i = 0; i < 5; i++)
        {
            if (random[3] == i)
            {
                if (random[3] == 0)
                {
                    Commander.transform.localPosition = new Vector3(-18.8f, 444.7f, 0);
                    c = 0;
                    break;
                }
                else if (random[3] == 1)
                {
                    Commander.transform.localPosition = new Vector3(621.2f, 265.4f, 0);
                    c = 1;
                    break;
                }
                else if (random[3] == 2)
                {
                    Commander.transform.localPosition = new Vector3(621.2f, -35.4f, 0);
                    c = 2;
                    break;
                }
                else if (random[3] == 3)
                {
                    Commander.transform.localPosition = new Vector3(-660.0f, -35.4f, 0);
                    c = 3;
                    break;
                }
                else if (random[3] == 4)
                {
                    Commander.transform.localPosition = new Vector3(-660.0f, 265.4f, 0);
                    c = 4;
                    break;
                }
            }
        }
    }
}
